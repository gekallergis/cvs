package se.customervalue.cvs;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;
import org.springframework.web.servlet.LocaleResolver;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
import org.springframework.web.servlet.i18n.SessionLocaleResolver;
import se.customervalue.cvs.abstraction.dataaccess.*;
import se.customervalue.cvs.domain.*;

import javax.transaction.Transactional;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

@SpringBootApplication
@EnableWebSecurity // Disable Spring Security
@EnableAsync
@EnableScheduling
//@EnableRedisHttpSession
public class Application extends WebMvcConfigurerAdapter implements CommandLineRunner {
	@Autowired
	private EmployeeRepository employeeRepository;

	@Autowired
	private CompanyRepository companyRepository;

	@Autowired
	private RoleRepository roleRepository;

	@Autowired
	private OrderHeaderRepository orderHeaderRepository;

	@Autowired
	private InvoiceRepository invoiceRepository;

	@Autowired
	private OrderItemRepository orderItemRepository;

	@Autowired
	private OwnedProductRepository ownedProductRepository;

	@Autowired
	private ProductRepository productRepository;

	@Autowired
	private ReportRepository reportRepository;

	@Autowired
	private CountryRepository countryRepository;

	@Autowired
	private SalesDataRepository salesDataRepository;

	@Autowired
	private TransactionRepository transactionRepository;

	@Autowired
	private CurrencyRepository currencyRepository;

	@Autowired
	private SystemLogEntryRepository systemLogEntryRepository;

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

	@Bean
	public LocaleResolver localeResolver() {
		SessionLocaleResolver slr = new SessionLocaleResolver();
		slr.setDefaultLocale(Locale.US);
		return slr;
	}

	@Bean
	public LocaleChangeInterceptor localeChangeInterceptor() {
		LocaleChangeInterceptor lci = new LocaleChangeInterceptor();
		lci.setParamName("lang");
		return lci;
	}

	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(localeChangeInterceptor());
	}

	@Override
	@Transactional
	public void run(String... strings) throws Exception {
		// Create test data!
		SystemLogEntry logEntry1 = new SystemLogEntry("A new invoice was issued for Microsoft at 4000SEK.", "Invoice Issued", SystemLogEntryType.FINANCE);
		SystemLogEntry logEntry2 = new SystemLogEntry("Microsoft successfully generated a report.", "Report Generation", SystemLogEntryType.REPORT);
		SystemLogEntry logEntry3 = new SystemLogEntry("Began generation of graphs for Microsoft NewBiz report.", "Graph Generation", SystemLogEntryType.REPORT);
		SystemLogEntry logEntry4 = new SystemLogEntry("Saab added a new company named 'Saab Norway'.", "Added New Company", SystemLogEntryType.COMPANY);
		SystemLogEntry logEntry5 = new SystemLogEntry("Updated account information for user George Kallergis (ID: 1345).", "Updated User Information", SystemLogEntryType.ACCOUNT);
		systemLogEntryRepository.save(logEntry1);
		systemLogEntryRepository.save(logEntry2);
		systemLogEntryRepository.save(logEntry3);
		systemLogEntryRepository.save(logEntry4);
		systemLogEntryRepository.save(logEntry5);

		Country country1 = new Country("Afghanistan", "AF", "AFG", "004");
		countryRepository.save(country1);
		Country country2 = new Country("sort|Aland Islands|[[Åland Islands]]", "AX", "ALA", "248");
		countryRepository.save(country2);
		Country country3 = new Country("Albania", "AL", "ALB", "008");
		countryRepository.save(country3);
		Country country4 = new Country("Algeria", "DZ", "DZA", "012");
		countryRepository.save(country4);
		Country country5 = new Country("American Samoa", "AS", "ASM", "016");
		countryRepository.save(country5);
		Country country6 = new Country("Andorra", "AD", "AND", "020");
		countryRepository.save(country6);
		Country country7 = new Country("Angola", "AO", "AGO", "024");
		countryRepository.save(country7);
		Country country8 = new Country("Anguilla", "AI", "AIA", "660");
		countryRepository.save(country8);
		Country country9 = new Country("Antarctica", "AQ", "ATA", "010");
		countryRepository.save(country9);
		Country country10 = new Country("Antigua and Barbuda", "AG", "ATG", "028");
		countryRepository.save(country10);
		Country country11 = new Country("Argentina", "AR", "ARG", "032");
		countryRepository.save(country11);
		Country country12 = new Country("Armenia", "AM", "ARM", "051");
		countryRepository.save(country12);
		Country country13 = new Country("Aruba", "AW", "ABW", "533");
		countryRepository.save(country13);
		Country country14 = new Country("Australia", "AU", "AUS", "036");
		countryRepository.save(country14);
		Country country15 = new Country("Austria", "AT", "AUT", "040");
		countryRepository.save(country15);
		Country country16 = new Country("Azerbaijan", "AZ", "AZE", "031");
		countryRepository.save(country16);
		Country country17 = new Country("Bahamas", "BS", "BHS", "044");
		countryRepository.save(country17);
		Country country18 = new Country("Bahrain", "BH", "BHR", "048");
		countryRepository.save(country18);
		Country country19 = new Country("Bangladesh", "BD", "BGD", "050");
		countryRepository.save(country19);
		Country country20 = new Country("Barbados", "BB", "BRB", "052");
		countryRepository.save(country20);
		Country country21 = new Country("Belarus", "BY", "BLR", "112");
		countryRepository.save(country21);
		Country country22 = new Country("Belgium", "BE", "BEL", "056");
		countryRepository.save(country22);
		Country country23 = new Country("Belize", "BZ", "BLZ", "084");
		countryRepository.save(country23);
		Country country24 = new Country("Benin", "BJ", "BEN", "204");
		countryRepository.save(country24);
		Country country25 = new Country("Bermuda", "BM", "BMU", "060");
		countryRepository.save(country25);
		Country country26 = new Country("Bhutan", "BT", "BTN", "064");
		countryRepository.save(country26);
		Country country27 = new Country("Bolivia (Plurinational State of)", "BO", "BOL", "068");
		countryRepository.save(country27);
		Country country28 = new Country("Bonaire, Sint Eustatius and Saba", "BQ", "BES", "535");
		countryRepository.save(country28);
		Country country29 = new Country("Bosnia and Herzegovina", "BA", "BIH", "070");
		countryRepository.save(country29);
		Country country30 = new Country("Botswana", "BW", "BWA", "072");
		countryRepository.save(country30);
		Country country31 = new Country("Bouvet Island", "BV", "BVT", "074");
		countryRepository.save(country31);
		Country country32 = new Country("Brazil", "BR", "BRA", "076");
		countryRepository.save(country32);
		Country country33 = new Country("British Indian Ocean Territory", "IO", "IOT", "086");
		countryRepository.save(country33);
		Country country34 = new Country("Brunei Darussalam", "BN", "BRN", "096");
		countryRepository.save(country34);
		Country country35 = new Country("Bulgaria", "BG", "BGR", "100");
		countryRepository.save(country35);
		Country country36 = new Country("Burkina Faso", "BF", "BFA", "854");
		countryRepository.save(country36);
		Country country37 = new Country("Burundi", "BI", "BDI", "108");
		countryRepository.save(country37);
		Country country38 = new Country("Cambodia", "KH", "KHM", "116");
		countryRepository.save(country38);
		Country country39 = new Country("Cameroon", "CM", "CMR", "120");
		countryRepository.save(country39);
		Country country40 = new Country("Canada", "CA", "CAN", "124");
		countryRepository.save(country40);
		Country country41 = new Country("Cabo Verde", "CV", "CPV", "132");
		countryRepository.save(country41);
		Country country42 = new Country("Cayman Islands", "KY", "CYM", "136");
		countryRepository.save(country42);
		Country country43 = new Country("Central African Republic", "CF", "CAF", "140");
		countryRepository.save(country43);
		Country country44 = new Country("Chad", "TD", "TCD", "148");
		countryRepository.save(country44);
		Country country45 = new Country("Chile", "CL", "CHL", "152");
		countryRepository.save(country45);
		Country country46 = new Country("China", "CN", "CHN", "156");
		countryRepository.save(country46);
		Country country47 = new Country("Christmas Island", "CX", "CXR", "162");
		countryRepository.save(country47);
		Country country48 = new Country("Cocos (Keeling) Islands", "CC", "CCK", "166");
		countryRepository.save(country48);
		Country country49 = new Country("Colombia", "CO", "COL", "170");
		countryRepository.save(country49);
		Country country50 = new Country("Comoros", "KM", "COM", "174");
		countryRepository.save(country50);
		Country country51 = new Country("Republic of the Congo|Congo", "CG", "COG", "178");
		countryRepository.save(country51);
		Country country52 = new Country("Congo (Democratic Republic of the)", "CD", "COD", "180");
		countryRepository.save(country52);
		Country country53 = new Country("Cook Islands", "CK", "COK", "184");
		countryRepository.save(country53);
		Country country54 = new Country("Costa Rica", "CR", "CRI", "188");
		countryRepository.save(country54);
		Country country55 = new Country("sort|Cote d'Ivoire|[[Côte d'Ivoire]]", "CI", "CIV", "384");
		countryRepository.save(country55);
		Country country56 = new Country("Croatia", "HR", "HRV", "191");
		countryRepository.save(country56);
		Country country57 = new Country("Cuba", "CU", "CUB", "192");
		countryRepository.save(country57);
		Country country58 = new Country("sort|Curacao|[[Curaçao]]", "CW", "CUW", "531");
		countryRepository.save(country58);
		Country country59 = new Country("Cyprus", "CY", "CYP", "196");
		countryRepository.save(country59);
		Country country60 = new Country("Czech Republic", "CZ", "CZE", "203");
		countryRepository.save(country60);
		Country country61 = new Country("Denmark", "DK", "DNK", "208");
		countryRepository.save(country61);
		Country country62 = new Country("Djibouti", "DJ", "DJI", "262");
		countryRepository.save(country62);
		Country country63 = new Country("Dominica", "DM", "DMA", "212");
		countryRepository.save(country63);
		Country country64 = new Country("Dominican Republic", "DO", "DOM", "214");
		countryRepository.save(country64);
		Country country65 = new Country("Ecuador", "EC", "ECU", "218");
		countryRepository.save(country65);
		Country country66 = new Country("Egypt", "EG", "EGY", "818");
		countryRepository.save(country66);
		Country country67 = new Country("El Salvador", "SV", "SLV", "222");
		countryRepository.save(country67);
		Country country68 = new Country("Equatorial Guinea", "GQ", "GNQ", "226");
		countryRepository.save(country68);
		Country country69 = new Country("Eritrea", "ER", "ERI", "232");
		countryRepository.save(country69);
		Country country70 = new Country("Estonia", "EE", "EST", "233");
		countryRepository.save(country70);
		Country country71 = new Country("Ethiopia", "ET", "ETH", "231");
		countryRepository.save(country71);
		Country country72 = new Country("Falkland Islands (Malvinas)", "FK", "FLK", "238");
		countryRepository.save(country72);
		Country country73 = new Country("Faroe Islands", "FO", "FRO", "234");
		countryRepository.save(country73);
		Country country74 = new Country("Fiji", "FJ", "FJI", "242");
		countryRepository.save(country74);
		Country country75 = new Country("Finland", "FI", "FIN", "246");
		countryRepository.save(country75);
		Country country76 = new Country("France", "FR", "FRA", "250");
		countryRepository.save(country76);
		Country country77 = new Country("French Guiana", "GF", "GUF", "254");
		countryRepository.save(country77);
		Country country78 = new Country("French Polynesia", "PF", "PYF", "258");
		countryRepository.save(country78);
		Country country79 = new Country("French Southern Territories", "TF", "ATF", "260");
		countryRepository.save(country79);
		Country country80 = new Country("Gabon", "GA", "GAB", "266");
		countryRepository.save(country80);
		Country country81 = new Country("Gambia", "GM", "GMB", "270");
		countryRepository.save(country81);
		Country country82 = new Country("Georgia (country)|Georgia", "GE", "GEO", "268");
		countryRepository.save(country82);
		Country country83 = new Country("Germany", "DE", "DEU", "276");
		countryRepository.save(country83);
		Country country84 = new Country("Ghana", "GH", "GHA", "288");
		countryRepository.save(country84);
		Country country85 = new Country("Gibraltar", "GI", "GIB", "292");
		countryRepository.save(country85);
		Country country86 = new Country("Greece", "GR", "GRC", "300");
		countryRepository.save(country86);
		Country country87 = new Country("Greenland", "GL", "GRL", "304");
		countryRepository.save(country87);
		Country country88 = new Country("Grenada", "GD", "GRD", "308");
		countryRepository.save(country88);
		Country country89 = new Country("Guadeloupe", "GP", "GLP", "312");
		countryRepository.save(country89);
		Country country90 = new Country("Guam", "GU", "GUM", "316");
		countryRepository.save(country90);
		Country country91 = new Country("Guatemala", "GT", "GTM", "320");
		countryRepository.save(country91);
		Country country92 = new Country("Guernsey", "GG", "GGY", "831");
		countryRepository.save(country92);
		Country country93 = new Country("Guinea", "GN", "GIN", "324");
		countryRepository.save(country93);
		Country country94 = new Country("Guinea-Bissau", "GW", "GNB", "624");
		countryRepository.save(country94);
		Country country95 = new Country("Guyana", "GY", "GUY", "328");
		countryRepository.save(country95);
		Country country96 = new Country("Haiti", "HT", "HTI", "332");
		countryRepository.save(country96);
		Country country97 = new Country("Heard Island and McDonald Islands", "HM", "HMD", "334");
		countryRepository.save(country97);
		Country country98 = new Country("Vatican City State|Holy See", "VA", "VAT", "336");
		countryRepository.save(country98);
		Country country99 = new Country("Honduras", "HN", "HND", "340");
		countryRepository.save(country99);
		Country country100 = new Country("Hong Kong", "HK", "HKG", "344");
		countryRepository.save(country100);
		Country country101 = new Country("Hungary", "HU", "HUN", "348");
		countryRepository.save(country101);
		Country country102 = new Country("Iceland", "IS", "ISL", "352");
		countryRepository.save(country102);
		Country country103 = new Country("India", "IN", "IND", "356");
		countryRepository.save(country103);
		Country country104 = new Country("Indonesia", "ID", "IDN", "360");
		countryRepository.save(country104);
		Country country105 = new Country("Iran (Islamic Republic of)", "IR", "IRN", "364");
		countryRepository.save(country105);
		Country country106 = new Country("Iraq", "IQ", "IRQ", "368");
		countryRepository.save(country106);
		Country country107 = new Country("Republic of Ireland|Ireland", "IE", "IRL", "372");
		countryRepository.save(country107);
		Country country108 = new Country("Isle of Man", "IM", "IMN", "833");
		countryRepository.save(country108);
		Country country109 = new Country("Israel", "IL", "ISR", "376");
		countryRepository.save(country109);
		Country country110 = new Country("Italy", "IT", "ITA", "380");
		countryRepository.save(country110);
		Country country111 = new Country("Jamaica", "JM", "JAM", "388");
		countryRepository.save(country111);
		Country country112 = new Country("Japan", "JP", "JPN", "392");
		countryRepository.save(country112);
		Country country113 = new Country("Jersey", "JE", "JEY", "832");
		countryRepository.save(country113);
		Country country114 = new Country("Jordan", "JO", "JOR", "400");
		countryRepository.save(country114);
		Country country115 = new Country("Kazakhstan", "KZ", "KAZ", "398");
		countryRepository.save(country115);
		Country country116 = new Country("Kenya", "KE", "KEN", "404");
		countryRepository.save(country116);
		Country country117 = new Country("Kiribati", "KI", "KIR", "296");
		countryRepository.save(country117);
		Country country118 = new Country("North Korea|Korea (Democratic People's Republic of)", "KP", "PRK", "408");
		countryRepository.save(country118);
		Country country119 = new Country("Korea (Republic of)", "KR", "KOR", "410");
		countryRepository.save(country119);
		Country country120 = new Country("Kuwait", "KW", "KWT", "414");
		countryRepository.save(country120);
		Country country121 = new Country("Kyrgyzstan", "KG", "KGZ", "417");
		countryRepository.save(country121);
		Country country122 = new Country("Lao People's Democratic Republic", "LA", "LAO", "418");
		countryRepository.save(country122);
		Country country123 = new Country("Latvia", "LV", "LVA", "428");
		countryRepository.save(country123);
		Country country124 = new Country("Lebanon", "LB", "LBN", "422");
		countryRepository.save(country124);
		Country country125 = new Country("Lesotho", "LS", "LSO", "426");
		countryRepository.save(country125);
		Country country126 = new Country("Liberia", "LR", "LBR", "430");
		countryRepository.save(country126);
		Country country127 = new Country("Libya", "LY", "LBY", "434");
		countryRepository.save(country127);
		Country country128 = new Country("Liechtenstein", "LI", "LIE", "438");
		countryRepository.save(country128);
		Country country129 = new Country("Lithuania", "LT", "LTU", "440");
		countryRepository.save(country129);
		Country country130 = new Country("Luxembourg", "LU", "LUX", "442");
		countryRepository.save(country130);
		Country country131 = new Country("Macao", "MO", "MAC", "446");
		countryRepository.save(country131);
		Country country132 = new Country("Republic of Macedonia|Macedonia (the former Yugoslav Republic of)", "MK", "MKD", "807");
		countryRepository.save(country132);
		Country country133 = new Country("Madagascar", "MG", "MDG", "450");
		countryRepository.save(country133);
		Country country134 = new Country("Malawi", "MW", "MWI", "454");
		countryRepository.save(country134);
		Country country135 = new Country("Malaysia", "MY", "MYS", "458");
		countryRepository.save(country135);
		Country country136 = new Country("Maldives", "MV", "MDV", "462");
		countryRepository.save(country136);
		Country country137 = new Country("Mali", "ML", "MLI", "466");
		countryRepository.save(country137);
		Country country138 = new Country("Malta", "MT", "MLT", "470");
		countryRepository.save(country138);
		Country country139 = new Country("Marshall Islands", "MH", "MHL", "584");
		countryRepository.save(country139);
		Country country140 = new Country("Martinique", "MQ", "MTQ", "474");
		countryRepository.save(country140);
		Country country141 = new Country("Mauritania", "MR", "MRT", "478");
		countryRepository.save(country141);
		Country country142 = new Country("Mauritius", "MU", "MUS", "480");
		countryRepository.save(country142);
		Country country143 = new Country("Mayotte", "YT", "MYT", "175");
		countryRepository.save(country143);
		Country country144 = new Country("Mexico", "MX", "MEX", "484");
		countryRepository.save(country144);
		Country country145 = new Country("Micronesia (Federated States of)", "FM", "FSM", "583");
		countryRepository.save(country145);
		Country country146 = new Country("Moldova (Republic of)", "MD", "MDA", "498");
		countryRepository.save(country146);
		Country country147 = new Country("Monaco", "MC", "MCO", "492");
		countryRepository.save(country147);
		Country country148 = new Country("Mongolia", "MN", "MNG", "496");
		countryRepository.save(country148);
		Country country149 = new Country("Montenegro", "ME", "MNE", "499");
		countryRepository.save(country149);
		Country country150 = new Country("Montserrat", "MS", "MSR", "500");
		countryRepository.save(country150);
		Country country151 = new Country("Morocco", "MA", "MAR", "504");
		countryRepository.save(country151);
		Country country152 = new Country("Mozambique", "MZ", "MOZ", "508");
		countryRepository.save(country152);
		Country country153 = new Country("Myanmar", "MM", "MMR", "104");
		countryRepository.save(country153);
		Country country154 = new Country("Namibia", "NA", "NAM", "516");
		countryRepository.save(country154);
		Country country155 = new Country("Nauru", "NR", "NRU", "520");
		countryRepository.save(country155);
		Country country156 = new Country("Nepal", "NP", "NPL", "524");
		countryRepository.save(country156);
		Country country157 = new Country("Netherlands", "NL", "NLD", "528");
		countryRepository.save(country157);
		Country country158 = new Country("New Caledonia", "NC", "NCL", "540");
		countryRepository.save(country158);
		Country country159 = new Country("New Zealand", "NZ", "NZL", "554");
		countryRepository.save(country159);
		Country country160 = new Country("Nicaragua", "NI", "NIC", "558");
		countryRepository.save(country160);
		Country country161 = new Country("Niger", "NE", "NER", "562");
		countryRepository.save(country161);
		Country country162 = new Country("Nigeria", "NG", "NGA", "566");
		countryRepository.save(country162);
		Country country163 = new Country("Niue", "NU", "NIU", "570");
		countryRepository.save(country163);
		Country country164 = new Country("Norfolk Island", "NF", "NFK", "574");
		countryRepository.save(country164);
		Country country165 = new Country("Northern Mariana Islands", "MP", "MNP", "580");
		countryRepository.save(country165);
		Country country166 = new Country("Norway", "NO", "NOR", "578");
		countryRepository.save(country166);
		Country country167 = new Country("Oman", "OM", "OMN", "512");
		countryRepository.save(country167);
		Country country168 = new Country("Pakistan", "PK", "PAK", "586");
		countryRepository.save(country168);
		Country country169 = new Country("Palau", "PW", "PLW", "585");
		countryRepository.save(country169);
		Country country170 = new Country("State of Palestine|Palestine, State of", "PS", "PSE", "275");
		countryRepository.save(country170);
		Country country171 = new Country("Panama", "PA", "PAN", "591");
		countryRepository.save(country171);
		Country country172 = new Country("Papua New Guinea", "PG", "PNG", "598");
		countryRepository.save(country172);
		Country country173 = new Country("Paraguay", "PY", "PRY", "600");
		countryRepository.save(country173);
		Country country174 = new Country("Peru", "PE", "PER", "604");
		countryRepository.save(country174);
		Country country175 = new Country("Philippines", "PH", "PHL", "608");
		countryRepository.save(country175);
		Country country176 = new Country("Pitcairn", "PN", "PCN", "612");
		countryRepository.save(country176);
		Country country177 = new Country("Poland", "PL", "POL", "616");
		countryRepository.save(country177);
		Country country178 = new Country("Portugal", "PT", "PRT", "620");
		countryRepository.save(country178);
		Country country179 = new Country("Puerto Rico", "PR", "PRI", "630");
		countryRepository.save(country179);
		Country country180 = new Country("Qatar", "QA", "QAT", "634");
		countryRepository.save(country180);
		Country country181 = new Country("sort|Reunion|[[Réunion]]", "RE", "REU", "638");
		countryRepository.save(country181);
		Country country182 = new Country("Romania", "RO", "ROU", "642");
		countryRepository.save(country182);
		Country country183 = new Country("Russian Federation", "RU", "RUS", "643");
		countryRepository.save(country183);
		Country country184 = new Country("Rwanda", "RW", "RWA", "646");
		countryRepository.save(country184);
		Country country185 = new Country("sort|Saint Barthelemy|[[Saint Barthélemy]]", "BL", "BLM", "652");
		countryRepository.save(country185);
		Country country186 = new Country("Saint Helena, Ascension and Tristan da Cunha", "SH", "SHN", "654");
		countryRepository.save(country186);
		Country country187 = new Country("Saint Kitts and Nevis", "KN", "KNA", "659");
		countryRepository.save(country187);
		Country country188 = new Country("Saint Lucia", "LC", "LCA", "662");
		countryRepository.save(country188);
		Country country189 = new Country("Saint Martin (French part)", "MF", "MAF", "663");
		countryRepository.save(country189);
		Country country190 = new Country("Saint Pierre and Miquelon", "PM", "SPM", "666");
		countryRepository.save(country190);
		Country country191 = new Country("Saint Vincent and the Grenadines", "VC", "VCT", "670");
		countryRepository.save(country191);
		Country country192 = new Country("Samoa", "WS", "WSM", "882");
		countryRepository.save(country192);
		Country country193 = new Country("San Marino", "SM", "SMR", "674");
		countryRepository.save(country193);
		Country country194 = new Country("Sao Tome and Principe", "ST", "STP", "678");
		countryRepository.save(country194);
		Country country195 = new Country("Saudi Arabia", "SA", "SAU", "682");
		countryRepository.save(country195);
		Country country196 = new Country("Senegal", "SN", "SEN", "686");
		countryRepository.save(country196);
		Country country197 = new Country("Serbia", "RS", "SRB", "688");
		countryRepository.save(country197);
		Country country198 = new Country("Seychelles", "SC", "SYC", "690");
		countryRepository.save(country198);
		Country country199 = new Country("Sierra Leone", "SL", "SLE", "694");
		countryRepository.save(country199);
		Country country200 = new Country("Singapore", "SG", "SGP", "702");
		countryRepository.save(country200);
		Country country201 = new Country("Sint Maarten (Dutch part)", "SX", "SXM", "534");
		countryRepository.save(country201);
		Country country202 = new Country("Slovakia", "SK", "SVK", "703");
		countryRepository.save(country202);
		Country country203 = new Country("Slovenia", "SI", "SVN", "705");
		countryRepository.save(country203);
		Country country204 = new Country("Solomon Islands", "SB", "SLB", "090");
		countryRepository.save(country204);
		Country country205 = new Country("Somalia", "SO", "SOM", "706");
		countryRepository.save(country205);
		Country country206 = new Country("South Africa", "ZA", "ZAF", "710");
		countryRepository.save(country206);
		Country country207 = new Country("South Georgia and the South Sandwich Islands", "GS", "SGS", "239");
		countryRepository.save(country207);
		Country country208 = new Country("South Sudan", "SS", "SSD", "728");
		countryRepository.save(country208);
		Country country209 = new Country("Spain", "ES", "ESP", "724");
		countryRepository.save(country209);
		Country country210 = new Country("Sri Lanka", "LK", "LKA", "144");
		countryRepository.save(country210);
		Country country211 = new Country("Sudan", "SD", "SDN", "729");
		countryRepository.save(country211);
		Country country212 = new Country("Suriname", "SR", "SUR", "740");
		countryRepository.save(country212);
		Country country213 = new Country("Svalbard and Jan Mayen", "SJ", "SJM", "744");
		countryRepository.save(country213);
		Country country214 = new Country("Swaziland", "SZ", "SWZ", "748");
		countryRepository.save(country214);
		Country country215 = new Country("Sweden", "SE", "SWE", "752");
		countryRepository.save(country215);
		Country country216 = new Country("Switzerland", "CH", "CHE", "756");
		countryRepository.save(country216);
		Country country217 = new Country("Syrian Arab Republic", "SY", "SYR", "760");
		countryRepository.save(country217);
		Country country218 = new Country("Taiwan, Province of China", "TW", "TWN", "158");
		countryRepository.save(country218);
		Country country219 = new Country("Tajikistan", "TJ", "TJK", "762");
		countryRepository.save(country219);
		Country country220 = new Country("Tanzania, United Republic of", "TZ", "TZA", "834");
		countryRepository.save(country220);
		Country country221 = new Country("Thailand", "TH", "THA", "764");
		countryRepository.save(country221);
		Country country222 = new Country("Timor-Leste", "TL", "TLS", "626");
		countryRepository.save(country222);
		Country country223 = new Country("Togo", "TG", "TGO", "768");
		countryRepository.save(country223);
		Country country224 = new Country("Tokelau", "TK", "TKL", "772");
		countryRepository.save(country224);
		Country country225 = new Country("Tonga", "TO", "TON", "776");
		countryRepository.save(country225);
		Country country226 = new Country("Trinidad and Tobago", "TT", "TTO", "780");
		countryRepository.save(country226);
		Country country227 = new Country("Tunisia", "TN", "TUN", "788");
		countryRepository.save(country227);
		Country country228 = new Country("Turkey", "TR", "TUR", "792");
		countryRepository.save(country228);
		Country country229 = new Country("Turkmenistan", "TM", "TKM", "795");
		countryRepository.save(country229);
		Country country230 = new Country("Turks and Caicos Islands", "TC", "TCA", "796");
		countryRepository.save(country230);
		Country country231 = new Country("Tuvalu", "TV", "TUV", "798");
		countryRepository.save(country231);
		Country country232 = new Country("Uganda", "UG", "UGA", "800");
		countryRepository.save(country232);
		Country country233 = new Country("Ukraine", "UA", "UKR", "804");
		countryRepository.save(country233);
		Country country234 = new Country("United Arab Emirates", "AE", "ARE", "784");
		countryRepository.save(country234);
		Country country235 = new Country("United Kingdom of Great Britain and Northern Ireland", "GB", "GBR", "826");
		countryRepository.save(country235);
		Country country236 = new Country("United States of America", "US", "USA", "840");
		countryRepository.save(country236);
		Country country237 = new Country("United States Minor Outlying Islands", "UM", "UMI", "581");
		countryRepository.save(country237);
		Country country238 = new Country("Uruguay", "UY", "URY", "858");
		countryRepository.save(country238);
		Country country239 = new Country("Uzbekistan", "UZ", "UZB", "860");
		countryRepository.save(country239);
		Country country240 = new Country("Vanuatu", "VU", "VUT", "548");
		countryRepository.save(country240);
		Country country241 = new Country("Venezuela (Bolivarian Republic of)", "VE", "VEN", "862");
		countryRepository.save(country241);
		Country country242 = new Country("Viet Nam", "VN", "VNM", "704");
		countryRepository.save(country242);
		Country country243 = new Country("British Virgin Islands|Virgin Islands (British)", "VG", "VGB", "092");
		countryRepository.save(country243);
		Country country244 = new Country("United States Virgin Islands|Virgin Islands (U.S.)", "VI", "VIR", "850");
		countryRepository.save(country244);
		Country country245 = new Country("Wallis and Futuna", "WF", "WLF", "876");
		countryRepository.save(country245);
		Country country246 = new Country("Western Sahara", "EH", "ESH", "732");
		countryRepository.save(country246);
		Country country247 = new Country("Yemen", "YE", "YEM", "887");
		countryRepository.save(country247);
		Country country248 = new Country("Zambia", "ZM", "ZMB", "894");
		countryRepository.save(country248);
		Country country249 = new Country("Zimbabwe", "ZW", "ZWE", "716");
		countryRepository.save(country249);


		Currency currency1 = new Currency("Euro", "EUR", "978");
		Currency currency2 = new Currency("Norwegian krone", "NOK", "578");
		Currency currency3 = new Currency("Danish krone", "DKK", "208");
		Currency currency4 = new Currency("Swedish krona/kronor", "SEK", "752");
		currencyRepository.save(currency1);
		currencyRepository.save(currency2);
		currencyRepository.save(currency3);
		currencyRepository.save(currency4);

		Employee employee1 = new Employee("r.franklin@companya.se", "Rena", "Franklin", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee2 = new Employee("k.ryder@companya.se", "Kaylynn", "Ryder", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee3 = new Employee("w.hogarth@companya.se", "Walter", "Hogarth", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee4 = new Employee("w.royle@companya.se", "Wilmer", "Royle", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee5 = new Employee("a.horton@companya.se", "Adam", "Horton", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee6 = new Employee("m.everill@companya.se", "Maci", "Everill", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee7 = new Employee("c.freeman@companya.se", "Cletus", "Freeman", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee8 = new Employee("r.townsend@companya.se", "Rodney", "Townsend", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee9 = new Employee("c.underwood@companya.se", "Chuck", "Underwood", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee10 = new Employee("d.burnham@companyb.se", "Devyn", "Burnham", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee11 = new Employee("s.saylor@companyb.se", "Silas", "Saylor", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee12 = new Employee("f.mondy@companyb.se", "Fulk", "Mondy", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee13 = new Employee("j.myles@companyb.se", "Joan", "Myles", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee14 = new Employee("n.thompsett@companyc.se", "Narelle", "Thompsett", "123456", "assets/img/avatars/male-big.png", true);
		Employee employee15 = new Employee("d.waller@companyc.se", "Devyn", "Waller", "123456", "assets/img/avatars/male-big.png", true);
		employeeRepository.save(employee1);
		employeeRepository.save(employee2);
		employeeRepository.save(employee3);
		employeeRepository.save(employee4);
		employeeRepository.save(employee5);
		employeeRepository.save(employee6);
		employeeRepository.save(employee7);
		employeeRepository.save(employee8);
		employeeRepository.save(employee9);
		employeeRepository.save(employee10);
		employeeRepository.save(employee11);
		employeeRepository.save(employee12);
		employeeRepository.save(employee13);
		employeeRepository.save(employee14);
		employeeRepository.save(employee15);

		Role role0 = new Role("isAdmin");
		Role role1 = new Role("canPurchaseProducts");
		Role role2 = new Role("canViewSalesData");
		Role role3 = new Role("canUploadSalesData");
		Role role4 = new Role("canDeleteSalesData");
		Role role5 = new Role("canDownloadSalesData");
		Role role6 = new Role("canViewOwnedProducts");
		Role role7 = new Role("canGenerateReport");
		Role role8 = new Role("canDownloadReport");
		Role role9 = new Role("canDeleteReport");
		Role role10 = new Role("canViewOrders");
		Role role11 = new Role("canViewInvoices");
		Role role12 = new Role("canViewProfiles");
		Role role13 = new Role("canViewCompanies");
		Role role14 = new Role("canViewSystemLog");
		roleRepository.save(role0);
		roleRepository.save(role1);
		roleRepository.save(role2);
		roleRepository.save(role3);
		roleRepository.save(role4);
		roleRepository.save(role5);
		roleRepository.save(role6);
		roleRepository.save(role7);
		roleRepository.save(role8);
		roleRepository.save(role9);
		roleRepository.save(role10);
		roleRepository.save(role11);
		roleRepository.save(role12);
		roleRepository.save(role13);
		roleRepository.save(role14);

		employee1.getRoles().add(role1);
		employee1.getRoles().add(role2);
		employee1.getRoles().add(role3);
		employee1.getRoles().add(role4);
		employee1.getRoles().add(role5);
		employee2.getRoles().add(role1);
		employee2.getRoles().add(role2);
		employee2.getRoles().add(role3);
		employee2.getRoles().add(role4);
		employee2.getRoles().add(role5);
		employee3.getRoles().add(role1);
		employee3.getRoles().add(role2);
		employee3.getRoles().add(role3);
		employee3.getRoles().add(role4);
		employee3.getRoles().add(role5);
		employee4.getRoles().add(role1);
		employee4.getRoles().add(role2);
		employee4.getRoles().add(role3);
		employee4.getRoles().add(role4);
		employee4.getRoles().add(role5);
		employee5.getRoles().add(role1);
		employee5.getRoles().add(role2);
		employee5.getRoles().add(role3);
		employee5.getRoles().add(role4);
		employee5.getRoles().add(role5);
		employee6.getRoles().add(role1);
		employee6.getRoles().add(role2);
		employee6.getRoles().add(role3);
		employee6.getRoles().add(role4);
		employee6.getRoles().add(role5);
		employee7.getRoles().add(role1);
		employee7.getRoles().add(role2);
		employee7.getRoles().add(role3);
		employee7.getRoles().add(role4);
		employee7.getRoles().add(role5);
		employee8.getRoles().add(role1);
		employee8.getRoles().add(role2);
		employee8.getRoles().add(role3);
		employee8.getRoles().add(role4);
		employee8.getRoles().add(role5);
		employee9.getRoles().add(role1);
		employee9.getRoles().add(role2);
		employee9.getRoles().add(role3);
		employee9.getRoles().add(role4);
		employee9.getRoles().add(role5);
		employee10.getRoles().add(role1);
		employee10.getRoles().add(role2);
		employee10.getRoles().add(role3);
		employee10.getRoles().add(role4);
		employee10.getRoles().add(role5);
		employee11.getRoles().add(role1);
		employee11.getRoles().add(role2);
		employee11.getRoles().add(role3);
		employee11.getRoles().add(role4);
		employee11.getRoles().add(role5);
		employee12.getRoles().add(role1);
		employee12.getRoles().add(role2);
		employee12.getRoles().add(role3);
		employee12.getRoles().add(role4);
		employee12.getRoles().add(role5);
		employee13.getRoles().add(role1);
		employee13.getRoles().add(role2);
		employee13.getRoles().add(role3);
		employee13.getRoles().add(role4);
		employee13.getRoles().add(role5);
		employee14.getRoles().add(role1);
		employee14.getRoles().add(role2);
		employee14.getRoles().add(role3);
		employee14.getRoles().add(role4);
		employee14.getRoles().add(role5);
		employee15.getRoles().add(role0);
		employee15.getRoles().add(role1);
		employee15.getRoles().add(role2);
		employee15.getRoles().add(role3);
		employee15.getRoles().add(role4);
		employee15.getRoles().add(role5);

		role0.getEmployees().add(employee15);
		role1.getEmployees().add(employee1);
		role1.getEmployees().add(employee2);
		role1.getEmployees().add(employee3);
		role1.getEmployees().add(employee4);
		role1.getEmployees().add(employee5);
		role1.getEmployees().add(employee6);
		role1.getEmployees().add(employee7);
		role1.getEmployees().add(employee8);
		role1.getEmployees().add(employee9);
		role1.getEmployees().add(employee10);
		role1.getEmployees().add(employee11);
		role1.getEmployees().add(employee12);
		role1.getEmployees().add(employee13);
		role1.getEmployees().add(employee14);
		role1.getEmployees().add(employee15);
		role2.getEmployees().add(employee1);
		role2.getEmployees().add(employee2);
		role2.getEmployees().add(employee3);
		role2.getEmployees().add(employee4);
		role2.getEmployees().add(employee5);
		role2.getEmployees().add(employee6);
		role2.getEmployees().add(employee7);
		role2.getEmployees().add(employee8);
		role2.getEmployees().add(employee9);
		role2.getEmployees().add(employee10);
		role2.getEmployees().add(employee11);
		role2.getEmployees().add(employee12);
		role2.getEmployees().add(employee13);
		role2.getEmployees().add(employee14);
		role2.getEmployees().add(employee15);
		role3.getEmployees().add(employee1);
		role3.getEmployees().add(employee2);
		role3.getEmployees().add(employee3);
		role3.getEmployees().add(employee4);
		role3.getEmployees().add(employee5);
		role3.getEmployees().add(employee6);
		role3.getEmployees().add(employee7);
		role3.getEmployees().add(employee8);
		role3.getEmployees().add(employee9);
		role3.getEmployees().add(employee10);
		role3.getEmployees().add(employee11);
		role3.getEmployees().add(employee12);
		role3.getEmployees().add(employee13);
		role3.getEmployees().add(employee14);
		role3.getEmployees().add(employee15);
		role4.getEmployees().add(employee1);
		role4.getEmployees().add(employee2);
		role4.getEmployees().add(employee3);
		role4.getEmployees().add(employee4);
		role4.getEmployees().add(employee5);
		role4.getEmployees().add(employee6);
		role4.getEmployees().add(employee7);
		role4.getEmployees().add(employee8);
		role4.getEmployees().add(employee9);
		role4.getEmployees().add(employee10);
		role4.getEmployees().add(employee11);
		role4.getEmployees().add(employee12);
		role4.getEmployees().add(employee13);
		role4.getEmployees().add(employee14);
		role4.getEmployees().add(employee15);
		role5.getEmployees().add(employee1);
		role5.getEmployees().add(employee2);
		role5.getEmployees().add(employee3);
		role5.getEmployees().add(employee4);
		role5.getEmployees().add(employee5);
		role5.getEmployees().add(employee6);
		role5.getEmployees().add(employee7);
		role5.getEmployees().add(employee8);
		role5.getEmployees().add(employee9);
		role5.getEmployees().add(employee10);
		role5.getEmployees().add(employee11);
		role5.getEmployees().add(employee12);
		role5.getEmployees().add(employee13);
		role5.getEmployees().add(employee14);
		role5.getEmployees().add(employee15);

		Company companya = new Company("Company A", "+1 800-955-9007", "AX95-484W", "Stockholm", "Hanstavagen 12", "Sveavegen 3", "19845");
		Company companya1 = new Company("Company A1", "+1 800-955-9008", "AX95-485W", "Athens", "Hanstavagen 12", "Sveavegen 3", "19845");
		Company companya2 = new Company("Company A2", "+1 800-955-9009", "AX95-486W", "Oslo", "Hanstavagen 12", "Sveavegen 3", "19845");
		Company companyb = new Company("Company B", "+1 800-955-9010", "AG32-621F", "Copenhagen", "Hanstavagen 12", "Sveavegen 3", "19845");
		companyRepository.save(companya);
		companyRepository.save(companya1);
		companyRepository.save(companya2);
		companyRepository.save(companyb);

		companya.getSubsidiaries().add(companya1);
		companya1.setParentCompany(companya);
		companya.getSubsidiaries().add(companya2);
		companya2.setParentCompany(companya);

		companya.setCountry(country2);
		country2.getCompanies().add(companya);
		companya.getEmployees().add(employee1);
		employee1.setEmployer(companya);
		companya.setManagingEmployee(employee1);

		companya1.setCountry(country1);
		country1.getCompanies().add(companya1);
		companya1.getEmployees().add(employee2);
		employee2.setEmployer(companya1);
		companya1.getEmployees().add(employee3);
		employee3.setEmployer(companya1);
		companya1.getEmployees().add(employee4);
		employee4.setEmployer(companya1);
		companya1.getEmployees().add(employee5);
		employee5.setEmployer(companya1);
		companya1.setManagingEmployee(employee2);

		companya2.setCountry(country3);
		country3.getCompanies().add(companya2);
		companya2.getEmployees().add(employee6);
		employee6.setEmployer(companya2);
		companya2.getEmployees().add(employee7);
		employee7.setEmployer(companya2);
		companya2.getEmployees().add(employee8);
		employee8.setEmployer(companya2);
		companya2.getEmployees().add(employee9);
		employee9.setEmployer(companya2);
		companya2.setManagingEmployee(employee6);

		companyb.setCountry(country4);
		country4.getCompanies().add(companyb);
		companyb.getEmployees().add(employee10);
		employee10.setEmployer(companyb);
		companyb.getEmployees().add(employee11);
		employee11.setEmployer(companyb);
		companyb.getEmployees().add(employee12);
		employee12.setEmployer(companyb);
		companyb.getEmployees().add(employee13);
		employee13.setEmployer(companyb);
		companyb.setManagingEmployee(employee10);

		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, +10);

		Invoice invoice1 = new Invoice("AA-454-4567-00", cal.getTime(), 18.0f, InvoiceStatus.UNPAID);
		Invoice invoice2 = new Invoice("AB-454-4136-23", cal.getTime(), 18.0f, InvoiceStatus.PAID);
		Invoice invoice3 = new Invoice("AB-454-4136-25", cal.getTime(), 18.0f, InvoiceStatus.PAID);
		Invoice invoice4 = new Invoice("AS-454-4156-45", cal.getTime(), 18.0f, InvoiceStatus.REFUND);
		Invoice invoice5 = new Invoice("AB-454-4136-26", cal.getTime(), 18.0f, InvoiceStatus.PAID);
		Invoice invoice6 = new Invoice("AS-454-4156-45", cal.getTime(), 18.0f, InvoiceStatus.REFUND);
		Invoice invoice7 = new Invoice("AB-454-4136-29", cal.getTime(), 18.0f, InvoiceStatus.UNPAID);
		Invoice invoice8 = new Invoice("AS-454-4156-45", cal.getTime(), 18.0f, InvoiceStatus.REFUND);
		Invoice invoice9 = new Invoice("AB-454-4136-21", cal.getTime(), 18.0f, InvoiceStatus.UNPAID);
		Invoice invoice10 = new Invoice("AS-454-4156-41", cal.getTime(), 18.0f, InvoiceStatus.REFUND);
		Invoice invoice11 = new Invoice("AB-454-4136-99", cal.getTime(), 18.0f, InvoiceStatus.UNPAID);
		Invoice invoice12 = new Invoice("AS-454-4156-32", cal.getTime(), 18.0f, InvoiceStatus.PAID);
		invoiceRepository.save(invoice1);
		invoiceRepository.save(invoice2);
		invoiceRepository.save(invoice3);
		invoiceRepository.save(invoice4);
		invoiceRepository.save(invoice5);
		invoiceRepository.save(invoice6);
		invoiceRepository.save(invoice7);
		invoiceRepository.save(invoice8);
		invoiceRepository.save(invoice9);
		invoiceRepository.save(invoice10);
		invoiceRepository.save(invoice11);
		invoiceRepository.save(invoice12);

		OrderHeader order1 = new OrderHeader(new Date());
		OrderHeader order2 = new OrderHeader(new Date());
		OrderHeader order3 = new OrderHeader(new Date());
		OrderHeader order4 = new OrderHeader(new Date());
		OrderHeader order5 = new OrderHeader(new Date());
		OrderHeader order6 = new OrderHeader(new Date());
		OrderHeader order7 = new OrderHeader(new Date());
		OrderHeader order8 = new OrderHeader(new Date());
		OrderHeader order9 = new OrderHeader(new Date());
		OrderHeader order10 = new OrderHeader(new Date());
		OrderHeader order11 = new OrderHeader(new Date());
		OrderHeader order12 = new OrderHeader(new Date());
		orderHeaderRepository.save(order1);
		orderHeaderRepository.save(order2);
		orderHeaderRepository.save(order3);
		orderHeaderRepository.save(order4);
		orderHeaderRepository.save(order5);
		orderHeaderRepository.save(order6);
		orderHeaderRepository.save(order7);
		orderHeaderRepository.save(order8);
		orderHeaderRepository.save(order9);
		orderHeaderRepository.save(order10);
		orderHeaderRepository.save(order11);
		orderHeaderRepository.save(order12);

		order1.setPurchasedBy(employee9);
		order1.setPurchasedFor(employee9.getEmployer());
		employee9.getEmployer().getOrders().add(order1);
		employee9.getOrders().add(order1);
		order1.setInvoice(invoice1);
		invoice1.setOrder(order1);

		order2.setPurchasedBy(employee9);
		order2.setPurchasedFor(employee9.getEmployer());
		employee9.getEmployer().getOrders().add(order2);
		employee9.getOrders().add(order2);
		order2.setInvoice(invoice2);
		invoice2.setOrder(order2);

		order3.setPurchasedBy(employee9);
		order3.setPurchasedFor(employee9.getEmployer());
		employee9.getEmployer().getOrders().add(order3);
		employee9.getOrders().add(order3);
		order3.setInvoice(invoice3);
		invoice3.setOrder(order3);

		order4.setPurchasedBy(employee1);
		order4.setPurchasedFor(employee1.getEmployer());
		employee1.getEmployer().getOrders().add(order4);
		employee1.getOrders().add(order4);
		order4.setInvoice(invoice4);
		invoice4.setOrder(order4);

		order5.setPurchasedBy(employee7);
		order5.setPurchasedFor(employee7.getEmployer());
		employee7.getEmployer().getOrders().add(order5);
		employee7.getOrders().add(order5);
		order5.setInvoice(invoice5);
		invoice5.setOrder(order5);

		order6.setPurchasedBy(employee2);
		order6.setPurchasedFor(employee2.getEmployer());
		employee2.getEmployer().getOrders().add(order6);
		employee2.getOrders().add(order6);
		order6.setInvoice(invoice6);
		invoice6.setOrder(order6);

		order7.setPurchasedBy(employee8);
		order7.setPurchasedFor(employee8.getEmployer());
		employee8.getEmployer().getOrders().add(order7);
		employee8.getOrders().add(order7);
		order7.setInvoice(invoice7);
		invoice7.setOrder(order7);

		order8.setPurchasedBy(employee4);
		order8.setPurchasedFor(employee4.getEmployer());
		employee4.getEmployer().getOrders().add(order8);
		employee4.getOrders().add(order8);
		order8.setInvoice(invoice8);
		invoice8.setOrder(order8);

		order9.setPurchasedBy(employee5);
		order9.setPurchasedFor(employee5.getEmployer());
		employee5.getEmployer().getOrders().add(order9);
		employee5.getOrders().add(order9);
		order9.setInvoice(invoice9);
		invoice9.setOrder(order9);

		order10.setPurchasedBy(employee10);
		order10.setPurchasedFor(employee10.getEmployer());
		employee10.getEmployer().getOrders().add(order10);
		employee10.getOrders().add(order10);
		order10.setInvoice(invoice10);
		invoice10.setOrder(order10);

		order11.setPurchasedBy(employee11);
		order11.setPurchasedFor(employee11.getEmployer());
		employee11.getEmployer().getOrders().add(order11);
		employee11.getOrders().add(order11);
		order11.setInvoice(invoice11);
		invoice11.setOrder(order11);

		order12.setPurchasedBy(employee13);
		order12.setPurchasedFor(employee13.getEmployer());
		employee13.getEmployer().getOrders().add(order12);
		employee13.getOrders().add(order12);
		order12.setInvoice(invoice12);
		invoice12.setOrder(order12);

		OrderItem orderItem1 = new OrderItem("NewBiz Report", "NewBiz report generation.", 5, 100.0f);
		OrderItem orderItem2 = new OrderItem("Predictive Report", "Predictive report generation.", 1, 2000.0f);
		OrderItem orderItem3 = new OrderItem("NewBiz Report", "NewBiz report generation.", 1, 50.0f);
		OrderItem orderItem4 = new OrderItem("Predictive Report", "Predictive report generation.", 10, 1000.0f);
		OrderItem orderItem5 = new OrderItem("NewBiz Report", "NewBiz report generation.", 1, 100.0f);
		OrderItem orderItem6 = new OrderItem("Predictive Report", "Predictive report generation.", 1, 2500.0f);
		OrderItem orderItem7 = new OrderItem("NewBiz Report", "NewBiz report generation.", 5, 100.0f);
		OrderItem orderItem8 = new OrderItem("Predictive Report", "Predictive report generation.", 1, 2000.0f);
		OrderItem orderItem9 = new OrderItem("NewBiz Report", "NewBiz report generation.", 5, 100.0f);
		OrderItem orderItem10 = new OrderItem("NewBiz Report", "NewBiz report generation.", 3, 50.0f);
		OrderItem orderItem11 = new OrderItem("NewBiz Report", "NewBiz report generation.", 2, 100.0f);
		OrderItem orderItem12 = new OrderItem("Predictive Report", "Predictive report generation.", 7, 2000.0f);
		OrderItem orderItem13 = new OrderItem("Predictive Report", "Predictive report generation.", 6, 2000.0f);
		OrderItem orderItem14 = new OrderItem("NewBiz Report", "NewBiz report generation.", 12, 100.0f);
		OrderItem orderItem15 = new OrderItem("NewBiz Report", "NewBiz report generation.", 8, 100.0f);
		OrderItem orderItem16 = new OrderItem("Predictive Report", "Predictive report generation.", 1, 3000.0f);
		OrderItem orderItem17 = new OrderItem("NewBiz Report", "NewBiz report generation.", 5, 100.0f);
		orderItemRepository.save(orderItem1);
		orderItemRepository.save(orderItem2);
		orderItemRepository.save(orderItem3);
		orderItemRepository.save(orderItem4);
		orderItemRepository.save(orderItem5);
		orderItemRepository.save(orderItem6);
		orderItemRepository.save(orderItem7);
		orderItemRepository.save(orderItem8);
		orderItemRepository.save(orderItem9);
		orderItemRepository.save(orderItem10);
		orderItemRepository.save(orderItem11);
		orderItemRepository.save(orderItem12);
		orderItemRepository.save(orderItem13);
		orderItemRepository.save(orderItem14);
		orderItemRepository.save(orderItem15);
		orderItemRepository.save(orderItem16);
		orderItemRepository.save(orderItem17);

		orderItem1.setOrder(order1);
		order1.getOrderItems().add(orderItem1);
		orderItem2.setOrder(order1);
		order1.getOrderItems().add(orderItem2);
		orderItem3.setOrder(order2);
		order2.getOrderItems().add(orderItem3);
		orderItem4.setOrder(order3);
		order3.getOrderItems().add(orderItem4);
		orderItem5.setOrder(order4);
		order4.getOrderItems().add(orderItem5);
		orderItem6.setOrder(order4);
		order4.getOrderItems().add(orderItem6);
		orderItem7.setOrder(order5);
		order5.getOrderItems().add(orderItem7);
		orderItem8.setOrder(order5);
		order5.getOrderItems().add(orderItem8);
		orderItem9.setOrder(order6);
		order6.getOrderItems().add(orderItem9);
		orderItem10.setOrder(order7);
		order7.getOrderItems().add(orderItem10);
		orderItem11.setOrder(order8);
		order8.getOrderItems().add(orderItem11);
		orderItem12.setOrder(order8);
		order8.getOrderItems().add(orderItem12);
		orderItem13.setOrder(order9);
		order9.getOrderItems().add(orderItem13);
		orderItem14.setOrder(order10);
		order10.getOrderItems().add(orderItem14);
		orderItem15.setOrder(order11);
		order11.getOrderItems().add(orderItem15);
		orderItem16.setOrder(order11);
		order11.getOrderItems().add(orderItem16);
		orderItem17.setOrder(order12);
		order12.getOrderItems().add(orderItem17);

		Product product1 = new Product("NewBiz Report", "Analyze your sales data!Generate your reports online!Blah blah blah!Lalalalala!Blah blah blah!Lalalalala!Blah blah blah!", false, ProductType.NEWBIZ, 5000.0f);
		Product product2 = new Product("Predictive Report", "Predict the future!Generate your reports online!Blah blah blah!Lalalalala!Blah blah blah!Lalalalala!Blah blah blah!", true, ProductType.PREDICTIVE, 50000.0f);
		productRepository.save(product1);
		productRepository.save(product2);

		OwnedProduct ownedProduct1 = new OwnedProduct();
		ownedProduct1.setQuantity(6);
		ownedProduct1.setOwner(companya);
		companya.getOwnedProducts().add(ownedProduct1);
		ownedProduct1.setProduct(product1);
		product1.getPurchases().add(ownedProduct1);

		OwnedProduct ownedProduct2 = new OwnedProduct();
		ownedProduct2.setQuantity(11);
		ownedProduct2.setOwner(companya);
		companya.getOwnedProducts().add(ownedProduct2);
		ownedProduct2.setProduct(product2);
		product2.getPurchases().add(ownedProduct2);

		OwnedProduct ownedProduct3 = new OwnedProduct();
		ownedProduct3.setQuantity(11);
		ownedProduct3.setOwner(companya1);
		companya1.getOwnedProducts().add(ownedProduct3);
		ownedProduct3.setProduct(product1);
		product1.getPurchases().add(ownedProduct3);

		OwnedProduct ownedProduct4 = new OwnedProduct();
		ownedProduct4.setQuantity(2);
		ownedProduct4.setOwner(companya1);
		companya1.getOwnedProducts().add(ownedProduct4);
		ownedProduct4.setProduct(product2);
		product2.getPurchases().add(ownedProduct4);

		OwnedProduct ownedProduct5 = new OwnedProduct();
		ownedProduct5.setQuantity(5);
		ownedProduct5.setOwner(companya2);
		companya2.getOwnedProducts().add(ownedProduct5);
		ownedProduct5.setProduct(product1);
		product1.getPurchases().add(ownedProduct5);

		OwnedProduct ownedProduct6 = new OwnedProduct();
		ownedProduct6.setQuantity(13);
		ownedProduct6.setOwner(companya2);
		companya2.getOwnedProducts().add(ownedProduct6);
		ownedProduct6.setProduct(product2);
		product2.getPurchases().add(ownedProduct6);

		OwnedProduct ownedProduct7 = new OwnedProduct();
		ownedProduct7.setQuantity(25);
		ownedProduct7.setOwner(companyb);
		companyb.getOwnedProducts().add(ownedProduct7);
		ownedProduct7.setProduct(product1);
		product1.getPurchases().add(ownedProduct7);

		OwnedProduct ownedProduct8 = new OwnedProduct();
		ownedProduct8.setQuantity(1);
		ownedProduct8.setOwner(companyb);
		companyb.getOwnedProducts().add(ownedProduct8);
		ownedProduct8.setProduct(product2);
		product2.getPurchases().add(ownedProduct8);

		ownedProductRepository.save(ownedProduct1);
		ownedProductRepository.save(ownedProduct2);
		ownedProductRepository.save(ownedProduct3);
		ownedProductRepository.save(ownedProduct4);
		ownedProductRepository.save(ownedProduct5);
		ownedProductRepository.save(ownedProduct6);
		ownedProductRepository.save(ownedProduct7);
		ownedProductRepository.save(ownedProduct8);

//		SalesData salesData1 = new SalesData("March 2014", SalesDataStatus.CHECKED, new Date(), "");
//		SalesData salesData2 = new SalesData("February 2014", SalesDataStatus.ERROR, new Date(), "");
//		SalesData salesData3 = new SalesData("July 2014", SalesDataStatus.PROCESSING, new Date(), "");
//		SalesData salesData4 = new SalesData("January 2015", SalesDataStatus.REPLACED, new Date(), "");
//		salesDataRepository.save(salesData1);
//		salesDataRepository.save(salesData2);
//		salesDataRepository.save(salesData3);
//		salesDataRepository.save(salesData4);
//
//		salesData1.setUploader(employee9);
//		employee9.getSalesDataUploads().add(salesData1);
//		salesData1.setCompany(companya1);
//		companya1.getSalesData().add(salesData1);
//
//		salesData2.setUploader(employee7);
//		employee7.getSalesDataUploads().add(salesData2);
//		salesData2.setCompany(companya1);
//		companya1.getSalesData().add(salesData2);
//
//		salesData3.setUploader(employee8);
//		employee8.getSalesDataUploads().add(salesData3);
//		salesData3.setCompany(companya2);
//		companya2.getSalesData().add(salesData3);
//
//		salesData4.setUploader(employee10);
//		employee10.getSalesDataUploads().add(salesData4);
//		salesData4.setCompany(companyb);
//		companyb.getSalesData().add(salesData4);
//
//		Transaction transaction1 = new Transaction("5612", new Date(), 241.92f);
//		Transaction transaction2 = new Transaction("1751", new Date(), 95.36f);
//		Transaction transaction3 = new Transaction("6382", new Date(), 241.92f);
//		Transaction transaction4 = new Transaction("9514", new Date(), 313.6f);
//		Transaction transaction5 = new Transaction("5615", new Date(), 241.92f);
//		Transaction transaction6 = new Transaction("3217", new Date(), 241.92f);
//		Transaction transaction7 = new Transaction("3741", new Date(), 185.92f);
//		Transaction transaction8 = new Transaction("9637", new Date(), 241.92f);
//		Transaction transaction9 = new Transaction("3171", new Date(), -39.2f);
//		Transaction transaction10 = new Transaction("3467", new Date(), 185.92f);
//		Transaction transaction11 = new Transaction("1751", new Date(), 241.92f);
//		Transaction transaction12 = new Transaction("3741", new Date(), 241.92f);
//		Transaction transaction13 = new Transaction("6382", new Date(), 241.92f);
//		Transaction transaction14 = new Transaction("5612", new Date(), 241.92f);
//		Transaction transaction15 = new Transaction("5612", new Date(), 241.92f);
//		Transaction transaction16 = new Transaction("1751", new Date(), 241.92f);
//		Transaction transaction17 = new Transaction("6382", new Date(), 241.92f);
//		Transaction transaction18 = new Transaction("3741", new Date(), 241.92f);
//		Transaction transaction19 = new Transaction("6382", new Date(), 241.92f);
//		Transaction transaction20 = new Transaction("3741", new Date(), 241.92f);
//		transactionRepository.save(transaction1);
//		transactionRepository.save(transaction2);
//		transactionRepository.save(transaction3);
//		transactionRepository.save(transaction4);
//		transactionRepository.save(transaction5);
//		transactionRepository.save(transaction6);
//		transactionRepository.save(transaction7);
//		transactionRepository.save(transaction8);
//		transactionRepository.save(transaction9);
//		transactionRepository.save(transaction10);
//		transactionRepository.save(transaction11);
//		transactionRepository.save(transaction12);
//		transactionRepository.save(transaction13);
//		transactionRepository.save(transaction14);
//		transactionRepository.save(transaction15);
//		transactionRepository.save(transaction16);
//		transactionRepository.save(transaction17);
//		transactionRepository.save(transaction18);
//		transactionRepository.save(transaction19);
//		transactionRepository.save(transaction20);
//
//		transaction1.setSalesDataBatch(salesData1);
//		salesData1.getTransactions().add(transaction1);
//		transaction1.setCountry(country1);
//		country1.getTransactions().add(transaction1);
//		transaction1.setCurrency(currency1);
//		currency1.getTransactions().add(transaction1);
//
//		transaction2.setSalesDataBatch(salesData1);
//		salesData1.getTransactions().add(transaction2);
//		transaction2.setCountry(country1);
//		country1.getTransactions().add(transaction2);
//		transaction2.setCurrency(currency1);
//		currency1.getTransactions().add(transaction2);
//
//		transaction3.setSalesDataBatch(salesData1);
//		salesData1.getTransactions().add(transaction3);
//		transaction3.setCountry(country1);
//		country1.getTransactions().add(transaction3);
//		transaction3.setCurrency(currency1);
//		currency1.getTransactions().add(transaction3);
//
//		transaction4.setSalesDataBatch(salesData1);
//		salesData1.getTransactions().add(transaction4);
//		transaction4.setCountry(country1);
//		country1.getTransactions().add(transaction4);
//		transaction4.setCurrency(currency1);
//		currency1.getTransactions().add(transaction4);
//
//		transaction5.setSalesDataBatch(salesData1);
//		salesData1.getTransactions().add(transaction5);
//		transaction5.setCountry(country1);
//		country1.getTransactions().add(transaction5);
//		transaction5.setCurrency(currency1);
//		currency1.getTransactions().add(transaction5);
//
//		transaction6.setSalesDataBatch(salesData2);
//		salesData2.getTransactions().add(transaction6);
//		transaction6.setCountry(country1);
//		country1.getTransactions().add(transaction6);
//		transaction6.setCurrency(currency1);
//		currency1.getTransactions().add(transaction6);
//
//		transaction7.setSalesDataBatch(salesData2);
//		salesData2.getTransactions().add(transaction7);
//		transaction7.setCountry(country1);
//		country1.getTransactions().add(transaction7);
//		transaction7.setCurrency(currency1);
//		currency1.getTransactions().add(transaction7);
//
//		transaction8.setSalesDataBatch(salesData2);
//		salesData2.getTransactions().add(transaction8);
//		transaction8.setCountry(country1);
//		country1.getTransactions().add(transaction8);
//		transaction8.setCurrency(currency1);
//		currency1.getTransactions().add(transaction8);
//
//		transaction9.setSalesDataBatch(salesData2);
//		salesData2.getTransactions().add(transaction9);
//		transaction9.setCountry(country1);
//		country1.getTransactions().add(transaction9);
//		transaction9.setCurrency(currency1);
//		currency1.getTransactions().add(transaction9);
//
//		transaction10.setSalesDataBatch(salesData2);
//		salesData2.getTransactions().add(transaction10);
//		transaction10.setCountry(country1);
//		country1.getTransactions().add(transaction10);
//		transaction10.setCurrency(currency1);
//		currency1.getTransactions().add(transaction10);
//
//		transaction11.setSalesDataBatch(salesData3);
//		salesData3.getTransactions().add(transaction11);
//		transaction11.setCountry(country1);
//		country1.getTransactions().add(transaction11);
//		transaction11.setCurrency(currency1);
//		currency1.getTransactions().add(transaction11);
//
//		transaction12.setSalesDataBatch(salesData3);
//		salesData3.getTransactions().add(transaction12);
//		transaction12.setCountry(country1);
//		country1.getTransactions().add(transaction12);
//		transaction12.setCurrency(currency1);
//		currency1.getTransactions().add(transaction12);
//
//		transaction13.setSalesDataBatch(salesData3);
//		salesData3.getTransactions().add(transaction13);
//		transaction13.setCountry(country1);
//		country1.getTransactions().add(transaction13);
//		transaction13.setCurrency(currency1);
//		currency1.getTransactions().add(transaction13);
//
//		transaction14.setSalesDataBatch(salesData3);
//		salesData3.getTransactions().add(transaction14);
//		transaction14.setCountry(country1);
//		country1.getTransactions().add(transaction14);
//		transaction14.setCurrency(currency1);
//		currency1.getTransactions().add(transaction14);
//
//		transaction15.setSalesDataBatch(salesData3);
//		salesData3.getTransactions().add(transaction15);
//		transaction15.setCountry(country1);
//		country1.getTransactions().add(transaction15);
//		transaction15.setCurrency(currency1);
//		currency1.getTransactions().add(transaction15);
//
//		transaction16.setSalesDataBatch(salesData4);
//		salesData4.getTransactions().add(transaction16);
//		transaction16.setCountry(country1);
//		country1.getTransactions().add(transaction16);
//		transaction16.setCurrency(currency1);
//		currency1.getTransactions().add(transaction16);
//
//		transaction17.setSalesDataBatch(salesData4);
//		salesData4.getTransactions().add(transaction17);
//		transaction17.setCountry(country1);
//		country1.getTransactions().add(transaction17);
//		transaction17.setCurrency(currency1);
//		currency1.getTransactions().add(transaction17);
//
//		transaction18.setSalesDataBatch(salesData4);
//		salesData4.getTransactions().add(transaction18);
//		transaction18.setCountry(country1);
//		country1.getTransactions().add(transaction18);
//		transaction18.setCurrency(currency1);
//		currency1.getTransactions().add(transaction18);
//
//		transaction19.setSalesDataBatch(salesData4);
//		salesData4.getTransactions().add(transaction19);
//		transaction19.setCountry(country1);
//		country1.getTransactions().add(transaction19);
//		transaction19.setCurrency(currency1);
//		currency1.getTransactions().add(transaction19);
//
//		transaction20.setSalesDataBatch(salesData4);
//		salesData4.getTransactions().add(transaction20);
//		transaction20.setCountry(country1);
//		country1.getTransactions().add(transaction20);
//		transaction20.setCurrency(currency1);
//		currency1.getTransactions().add(transaction20);
//
//		Report report1 = new Report(new Date(), "", ReportStatus.GENERATING);
//		Report report2 = new Report(new Date(), "", ReportStatus.READY);
//		Report report3 = new Report(new Date(), "", ReportStatus.ERROR);
//		Report report4 = new Report(new Date(), "", ReportStatus.READY);
//		reportRepository.save(report1);
//		reportRepository.save(report2);
//		reportRepository.save(report3);
//		reportRepository.save(report4);
//
//		report1.setReporter(employee9);
//		employee9.getGeneratedReports().add(report1);
//		report1.setCompany(companya1);
//		companya1.getReports().add(report1);
//		report1.setProduct(product1);
//		report1.setSalesData(salesData1);
//		salesData1.getReports().add(report1);
//
//		report2.setReporter(employee9);
//		employee9.getGeneratedReports().add(report2);
//		report2.setCompany(companya1);
//		companya1.getReports().add(report2);
//		report2.setProduct(product2);
//		report2.setSalesData(salesData2);
//		salesData2.getReports().add(report2);
//
//		report3.setReporter(employee9);
//		employee9.getGeneratedReports().add(report3);
//		report3.setCompany(companya2);
//		companya2.getReports().add(report3);
//		report3.setProduct(product2);
//		report3.setSalesData(salesData3);
//		salesData3.getReports().add(report3);
//
//		report4.setReporter(employee9);
//		employee9.getGeneratedReports().add(report4);
//		report4.setCompany(companyb);
//		companyb.getReports().add(report4);
//		report4.setProduct(product1);
//		report4.setSalesData(salesData4);
//		salesData4.getReports().add(report4);
	}
}
